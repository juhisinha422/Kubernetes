𝗚𝗲𝘁𝘁𝗶𝗻𝗴 𝗦𝘁𝗮𝗿𝘁𝗲𝗱 𝘄𝗶𝘁𝗵 𝗠𝗶𝗻𝗶𝗸𝘂𝗯𝗲 𝗮𝗻𝗱 𝗣𝗼𝗱𝘀 𝗶𝗻 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀

🔧 𝗠𝗶𝗻𝗶𝗸𝘂𝗯𝗲 𝗢𝘃𝗲𝗿𝘃𝗶𝗲𝘄
🧰 It is a tool used to set up a single-node cluster
📦 Contains API servers, ETCD database, and container runtime
🛠️ Helps in containerizing applications
💻 Ideal for development, testing, and experimentation on local systems
🖥️ Both master and worker run on the same machine, and it's platform-independent
🧑💼 By default, it creates a single node
⚙️ Installation is simpler compared to other tools
❌ Not recommended for production – real-time deployments happen on multi-node clusters
🧪 Great for testing new Kubernetes features before using them in production

💡 𝗠𝗶𝗻𝗶𝗸𝘂𝗯𝗲 𝗥𝗲𝗾𝘂𝗶𝗿𝗲𝗺𝗲𝗻𝘁𝘀:
🖥️ 2 CPUs or more
🧠 2GB of free memory
💾 20GB of free disk space (EBS volume)
🌐 Internet connection
🐳 Container or Virtual Machine manager (e.g., Docker)

🧱 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 𝗣𝗼𝗱𝘀
🔹 Smallest deployable object in Kubernetes
📦 Represents a group of containers (usually one)
🧩 Acts like a single instance of an application
🔄 Containers in a pod share network namespace and storage
🔁 Changes in one container can reflect in another within the same pod
📜 Pods require specifying image, configuration, and resource limits
🔗 Kubernetes communicates with pods, not individual containers

👨🏫 𝗣𝗼𝗱 𝗖𝗿𝗲𝗮𝘁𝗶𝗼𝗻 𝗠𝗲𝘁𝗵𝗼𝗱𝘀:
💻 Imperative (command line)
📄 Declarative (using manifest YAML file)

🛠️ 𝗣𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗦𝘁𝗲𝗽𝘀:
 🚀 Launch an EC2 instance
 🐧 Install Docker on linux 
 🌐 Install minikube from minikube official site
 ⚙️ Install kubectl (Kubernetes CLI) from K8's official site

📦 𝗖𝗿𝗲𝗮𝘁𝗶𝗻𝗴 𝗮 𝗣𝗼𝗱
𝟭. 𝗜𝗺𝗽𝗲𝗿𝗮𝘁𝗶𝘃𝗲 𝗪𝗮𝘆:
 kubectl run pod-name --image=nginx
 ✅To View Pods:
 kubectl get pods

𝟮. 𝗗𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝘃𝗲 𝗪𝗮𝘆:
 ✅Create YAML file:
 vim demo.yaml
 ✅Inside YAML:
 Use kubectl api-resources for API version & kind
 Set metadata and spec (Docker Hub image)
✅Create pod:
 kubectl create -f demo.yaml
