Managing Environment Variables in Kubernetes 🤔 

#ConfigMaps #Secrets 🛅 

What if you have any reasonably sized application and uses environment variables to reference special bits of data such as API Keys, tokens or other secrets❓How will you manage them in K8❓

Thankfully 🙏 , Kubernetes solves this problem with Secrets (for confidential 🔒 data) and ConfigMaps (for non-confidential data).

#ConfigMaps 🗺 

A ConfigMap is an API object used to store non-confidential data in key-value pairs. It is used to pass configuration data in form of key-value pairs in K8s.
When a key-value pair is created in ConfigMap then you can inject 💉 that ConfigMap into the pod and that can be reused🔁into multiple pods.

⏩ kubectl create configmap <configmap_name> --from-literal=key1=value1 --from-literal=key2=value2

#Secrets🔒

A Secret is an object that contains a small amount of sensitive 📒  data such as a password, a token, or a key 🗝 . Secrets are base64 encoded. There are several types of Secrets to choose from such as tls, opaque, etc.....
Opaque is the default Secret type. When you create a Secret using kubectl, you must use the "generic" subcommand to indicate an Opaque Secret type.

⏩kubectl create secret generic <secret_name> --from-literal=key1=value1 --from-literal=key2=value2

Note 🗒🗒🗒
🔸 Both ConfigMaps and Secrets can be used at the pod level or as volumes mounted in specific paths within a pod.
🔸Secrets are not encrypted, only encoded. So one of the best practice using secrets to make it safer is by "Enabling Encryption at Rest" so they are stored encrypted 🔑 in ETCD. 
