𝗖𝗼𝗻𝗳𝗶𝗴𝗠𝗮𝗽 

In Kubernetes, keeping configs outside of your application code helps make deployments cleaner, safer, and more flexible.

Here’s how to use ConfigMaps 👇

🛠️ 𝗧𝘄𝗼 𝗪𝗮𝘆𝘀 𝘁𝗼 𝗖𝗿𝗲𝗮𝘁𝗲 𝗮 𝗖𝗼𝗻𝗳𝗶𝗴𝗠𝗮𝗽

🔸 Imperative Way:
𝘬𝘶𝘣𝘦𝘤𝘵𝘭 𝘤𝘳𝘦𝘢𝘵𝘦 𝘤𝘰𝘯𝘧𝘪𝘨𝘮𝘢𝘱 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨 --𝘧𝘳𝘰𝘮-𝘭𝘪𝘵𝘦𝘳𝘢𝘭=𝘈𝘗𝘗_𝘔𝘖𝘋𝘌=𝘱𝘳𝘰𝘥𝘶𝘤𝘵𝘪𝘰𝘯
𝘬𝘶𝘣𝘦𝘤𝘵𝘭 𝘤𝘳𝘦𝘢𝘵𝘦 𝘤𝘰𝘯𝘧𝘪𝘨𝘮𝘢𝘱 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨 --𝘧𝘳𝘰𝘮-𝘧𝘪𝘭𝘦=𝘤𝘰𝘯𝘧𝘪𝘨.𝘵𝘹𝘵

🔸 Declarative Way (YAML):
𝘢𝘱𝘪𝘝𝘦𝘳𝘴𝘪𝘰𝘯: 𝘷1
𝘬𝘪𝘯𝘥: 𝘊𝘰𝘯𝘧𝘪𝘨𝘔𝘢𝘱
𝘮𝘦𝘵𝘢𝘥𝘢𝘵𝘢:
 𝘯𝘢𝘮𝘦: 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨
𝘥𝘢𝘵𝘢:
 𝘈𝘗𝘗_𝘔𝘖𝘋𝘌: "𝘱𝘳𝘰𝘥𝘶𝘤𝘵𝘪𝘰𝘯"
 𝘋𝘉_𝘏𝘖𝘚𝘛: "𝘮𝘺𝘴𝘲𝘭"
👉Apply with:
𝘬𝘶𝘣𝘦𝘤𝘵𝘭 𝘢𝘱𝘱𝘭𝘺 -𝘧 𝘤𝘰𝘯𝘧𝘪𝘨𝘮𝘢𝘱.𝘺𝘢𝘮𝘭

📥 𝗜𝗻𝗷𝗲𝗰𝘁 𝗖𝗼𝗻𝗳𝗶𝗴𝗠𝗮𝗽 𝗶𝗻𝘁𝗼 𝗮 𝗣𝗼𝗱

🔸 As Environment Variables:
𝘦𝘯𝘷𝘍𝘳𝘰𝘮:
 - 𝘤𝘰𝘯𝘧𝘪𝘨𝘔𝘢𝘱𝘙𝘦𝘧:
   𝘯𝘢𝘮𝘦: 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨

🔸 Single Environment Variable from ConfigMap:
𝘦𝘯𝘷:
 - 𝘯𝘢𝘮𝘦: 𝘈𝘗𝘗_𝘔𝘖𝘋𝘌
  𝘷𝘢𝘭𝘶𝘦𝘍𝘳𝘰𝘮:
   𝘤𝘰𝘯𝘧𝘪𝘨𝘔𝘢𝘱𝘒𝘦𝘺𝘙𝘦𝘧:
    𝘯𝘢𝘮𝘦: 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨
    𝘬𝘦𝘺: 𝘈𝘗𝘗_𝘔𝘖𝘋𝘌

🔸 As Files in a Volume:
𝘷𝘰𝘭𝘶𝘮𝘦𝘴:
 - 𝘯𝘢𝘮𝘦: 𝘤𝘰𝘯𝘧𝘪𝘨-𝘷𝘰𝘭𝘶𝘮𝘦
  𝘤𝘰𝘯𝘧𝘪𝘨𝘔𝘢𝘱:
   𝘯𝘢𝘮𝘦: 𝘢𝘱𝘱-𝘤𝘰𝘯𝘧𝘪𝘨
𝘷𝘰𝘭𝘶𝘮𝘦𝘔𝘰𝘶𝘯𝘵𝘴:
 - 𝘯𝘢𝘮𝘦: 𝘤𝘰𝘯𝘧𝘪𝘨-𝘷𝘰𝘭𝘶𝘮𝘦
  𝘮𝘰𝘶𝘯𝘵𝘗𝘢𝘵𝘩: /𝘦𝘵𝘤/𝘤𝘰𝘯𝘧𝘪𝘨

✅ Why Use ConfigMaps?
 • Separate config from code for cleaner builds
 • Update config without changing container images
 • Reuse configs across multiple pods
 • Manage sensitive vs non-sensitive data properly (Secrets vs ConfigMaps)
 • Works with deployments, CronJobs, Jobs, and more
