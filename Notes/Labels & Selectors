🚀 𝐊𝐮𝐛𝐞𝐫𝐧𝐞𝐭𝐞𝐬 𝐋𝐞𝐚𝐫𝐧𝐢𝐧𝐠 𝐉𝐨𝐮𝐫𝐧𝐞𝐲 – 𝐃𝐚𝐲 4: 𝐔𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝𝐢𝐧𝐠 𝐋𝐚𝐛𝐞𝐥𝐬 & 𝐒𝐞𝐥𝐞𝐜𝐭𝐨𝐫𝐬 𝐟𝐨𝐫 𝐄𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐑𝐞𝐬𝐨𝐮𝐫𝐜𝐞 𝐌𝐚𝐧𝐚𝐠𝐞𝐦𝐞𝐧𝐭! 🎯🔍
Today, I explored one of the core concepts in Kubernetes – Labels and Selectors, which play a crucial role in organizing, identifying, and managing resources efficiently within a Kubernetes cluster.

📌 𝗪𝗵𝗮𝘁 𝗮𝗿𝗲 𝗟𝗮𝗯𝗲𝗹𝘀 & 𝗦𝗲𝗹𝗲𝗰𝘁𝗼𝗿𝘀?

🏷 𝗟𝗮𝗯𝗲𝗹𝘀
hashtag#Labels are key-value pairs attached to Kubernetes objects (such as Pods, Services, Deployments, and ReplicaSets). They help in categorizing, filtering, and grouping resources based on specific attributes. Unlike names and UIDs, which are unique, labels provide a flexible way to organize resources logically.

✅ Example of a label:
metadata:
 labels:
 app: web
 env: production

🔍 𝗦𝗲𝗹𝗲𝗰𝘁𝗼𝗿𝘀
hashtag#Selectors allow us to filter and retrieve Kubernetes resources based on specific labels. Instead of manually managing each resource, selectors enable automatic selection of relevant objects based on defined criteria.

✅ Types of Selectors in Kubernetes:
🔹 Equality-based selectors: Filters objects using = or != (e.g., app=web).
🔹 Set-based selectors: Matches objects from a defined set (e.g., env in (staging, production)).

✅ Example usage:
kubectl get pods --selector app=web

 📂GitHub : https://lnkd.in/gw6_PuWb

📌 𝗧𝗼𝗽𝗶𝗰𝘀 𝗖𝗼𝘃𝗲𝗿𝗲𝗱:

1️⃣ 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝘁𝗶𝗼𝗻 𝗖𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿𝘀 & 𝗗𝗲𝘀𝗶𝗿𝗲𝗱 𝗦𝘁𝗮𝘁𝗲 𝗠𝗮𝗶𝗻𝘁𝗲𝗻𝗮𝗻𝗰𝗲
Kubernetes uses Replication Controllers & ReplicaSets to maintain the desired number of running pods.
If a pod fails, Kubernetes automatically replaces it, ensuring application availability.

2️⃣ 𝗗𝘆𝗻𝗮𝗺𝗶𝗰 𝗦𝗰𝗮𝗹𝗶𝗻𝗴 𝘄𝗶𝘁𝗵 𝗠𝘂𝗹𝘁𝗶𝗽𝗹𝗲 𝗖𝗼𝗻𝘁𝗮𝗶𝗻𝗲𝗿𝘀
Explored how Horizontal Pod Autoscaler (HPA) dynamically scales pods based on CPU or memory usage.
Learned how to manage multi-container pods for more complex applications.

3️⃣ 𝗟𝗮𝗯𝗲𝗹𝗶𝗻𝗴 & 𝗣𝗼𝗱 𝗜𝗱𝗲𝗻𝘁𝗶𝗳𝗶𝗰𝗮𝘁𝗶𝗼𝗻 𝗳𝗼𝗿 𝗕𝗲𝘁𝘁𝗲𝗿 𝗠𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁
Labels allow Kubernetes to group, filter, and manage pods efficiently.
Used kubectl get pods --selector env=production to query resources dynamically.
Services use selectors to route traffic automatically to the right set of pods.

4️⃣ 𝗨𝘀𝗶𝗻𝗴 𝗸𝘂𝗯𝗲𝗰𝘁𝗹 𝗰𝗿𝗲𝗮𝘁𝗲 𝘃𝘀. 𝗸𝘂𝗯𝗲𝗰𝘁𝗹 𝗮𝗽𝗽𝗹𝘆 𝗳𝗼𝗿 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗮𝘁𝗶𝗼𝗻 𝗨𝗽𝗱𝗮𝘁𝗲𝘀
kubectl create is used for new resources but does not update existing ones.
kubectl apply follows a declarative approach, allowing incremental updates to existing resources.
