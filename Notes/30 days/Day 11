🗓 𝗗𝗮𝘆 𝟭𝟭: 𝗨𝗻𝗱𝗲𝗿𝘀𝘁𝗮𝗻𝗱𝗶𝗻𝗴 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝗦𝗲𝘁𝘀 𝗶𝗻 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀
Kubernetes ReplicaSets are fundamental to ensuring high availability and fault tolerance for applications. They automatically maintain a stable set of replica Pods, making sure the specified number of Pods are always running, even in the event of node or Pod failure.

🔁 𝗪𝗵𝗮𝘁 𝗶𝘀 𝗮 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝗦𝗲𝘁?
A ReplicaSet is a Kubernetes controller whose purpose is to maintain a desired number of Pod replicas running at any given time.
If a Pod fails or is deleted, the ReplicaSet automatically creates a new one to match the target replica count.

⚙️ 𝗞𝗲𝘆 𝗙𝗲𝗮𝘁𝘂𝗿𝗲𝘀
Self-healing: Restarts Pods when they crash or are deleted.
Scalability: Easily scale up/down by changing the replicas count.
Label-based selection: Uses labels to match and manage Pods.

📄 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝗦𝗲𝘁 𝗬𝗔𝗠𝗟
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: nginx-replicaset
spec:
 replicas: 3
 selector:
 matchLabels:
 app: nginx
 template:
 metadata:
 labels:
 app: nginx
 spec:
 containers:
 - name: nginx
 image: nginx:latest
 ports:
 - containerPort: 80

𝗘𝘅𝗽𝗹𝗮𝗻𝗮𝘁𝗶𝗼𝗻:
𝗿𝗲𝗽𝗹𝗶𝗰𝗮𝘀: 3 – Maintain 3 replicas of the Pod at all times.
𝘀𝗲𝗹𝗲𝗰𝘁𝗼𝗿 – Matches Pods with the label app: nginx.
𝘁𝗲𝗺𝗽𝗹𝗮𝘁𝗲 – Defines the Pod configuration the ReplicaSet will maintain.

🚨 𝗜𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝗡𝗼𝘁𝗲
ReplicaSets are rarely created directly. Instead, they are managed indirectly via Deployments, which offer advanced features like rolling updates and rollbacks.

🔍 𝗪𝗵𝗲𝗻 𝘁𝗼 𝗨𝘀𝗲 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝗦𝗲𝘁𝘀 𝗗𝗶𝗿𝗲𝗰𝘁𝗹𝘆?
 • For stateless applications where you need basic replication.
 • In learning environments or for debugging how replication works under the hood.
