𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 𝗨𝗽𝗴𝗿𝗮𝗱𝗲 𝗝𝗼𝘂𝗿𝗻𝗲𝘆 𝗼𝗻 𝗘𝗞𝗦 ☸️✨

Keeping cluster up to date is crucial since 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 𝘀𝘂𝗽𝗽𝗼𝗿𝘁𝘀 𝗼𝗻𝗹𝘆 𝘁𝗵𝗲 𝗹𝗮𝘀𝘁 𝟯 𝘃𝗲𝗿𝘀𝗶𝗼𝗻𝘀.

Recently, I upgraded an 𝗘𝗞𝗦 𝗰𝗹𝘂𝘀𝘁𝗲𝗿 𝘁𝗼 𝘃𝟭.𝟯𝟮.𝟮 and here’s how we achieved a 𝘇𝗲𝗿𝗼-𝗱𝗼𝘄𝗻𝘁𝗶𝗺𝗲 𝘂𝗽𝗴𝗿𝗮𝗱𝗲 ⬇️

⚙️ 𝗣𝗿𝗲𝗿𝗲𝗾𝘂𝗶𝘀𝗶𝘁𝗲𝘀
🔹 𝗖𝗵𝗲𝗰𝗸 𝗿𝗲𝗹𝗲𝗮𝘀𝗲 𝗻𝗼𝘁𝗲𝘀 for version changes
🔹 𝗖𝗵𝗲𝗰𝗸 𝗳𝗼𝗿 𝗱𝗲𝗽𝗿𝗲𝗰𝗮𝘁𝗲𝗱 𝗔𝗣𝗜𝘀 → adjust manifests if needed
🔹 Align add-ons and dependencies


🛠️ 𝗨𝗽𝗴𝗿𝗮𝗱𝗲 𝗣𝗿𝗼𝗰𝗲𝘀𝘀

1️⃣ 𝗖𝗼𝗻𝘁𝗿𝗼𝗹 𝗣𝗹𝗮𝗻𝗲 𝗨𝗽𝗴𝗿𝗮𝗱𝗲
EKS → Select cluster → Click Upgrade version → AWS manages it (~30 mins)

Upgrading the EKS control plane only updates the Kubernetes master components.

2️⃣ 𝗡𝗼𝗱𝗲 𝗚𝗿𝗼𝘂𝗽 / 𝗡𝗼𝗱𝗲 𝗨𝗽𝗴𝗿𝗮𝗱𝗲

EKS → Clusters → Select Cluster → Compute → Node Groups → Select Node Group → Update → Choose AMI / Kubernetes Version → Apply

Monitor pod rescheduling & health

3️⃣ 𝗔𝗱𝗱-𝗼𝗻𝘀 𝗨𝗽𝗴𝗿𝗮𝗱𝗲
Update CNI, CoreDNS, KubeProxy, and any custom add-ons to match the new version

✅ Once validated → Delete old node group

🔍 𝗞𝗲𝘆 𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴
After the upgrade, we noticed an 𝗶𝗻𝗰𝗿𝗲𝗮𝘀𝗲 𝗶𝗻 𝗽𝗼𝗱 𝗺𝗲𝗺𝗼𝗿𝘆 𝘂𝘀𝗮𝗴𝗲 📈 due to cgroup v1 → v2 switch in the latest AMI.
It’s not a bug ⚠️ — just a 𝗻𝗲𝘄 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲 𝗮𝗰𝗰𝗼𝘂𝗻𝘁𝗶𝗻𝗴 𝗺𝗲𝘁𝗵𝗼𝗱. Keep this in mind while tuning requests/limits.


⚡ 𝗣𝗿𝗼 𝗧𝗶𝗽: Always check release notes!
