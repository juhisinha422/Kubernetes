𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 𝗦𝗲𝗰𝗿𝗲𝘁𝘀 & 𝗡𝗮𝗺𝗲𝘀𝗽𝗮𝗰𝗲𝘀: 𝗦𝗲𝗰𝘂𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗢𝗿𝗴𝗮𝗻𝗶𝘇𝗶𝗻𝗴 𝗬𝗼𝘂𝗿 𝗖𝗹𝘂𝘀𝘁𝗲𝗿 𝗟𝗶𝗸𝗲 𝗮 𝗣𝗿𝗼 
* 𝗦𝗘𝗖𝗥𝗘𝗧𝗦 𝗶𝗻 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀
Secrets help store sensitive data securely in a Kubernetes cluster (e.g., DB credentials, API tokens, Docker credentials).

* 𝗞𝗲𝘆 𝗣𝗼𝗶𝗻𝘁𝘀:
* Base64 encoded, not encrypted by default.
* Max size per secret: 1MB.
*Two ways to create secrets:
* Imperative
* Declarative

* 𝗜𝗺𝗽𝗲𝗿𝗮𝘁𝗶𝘃𝗲 𝗘𝘅𝗮𝗺𝗽𝗹𝗲𝘀
* --𝗳𝗿𝗼𝗺-𝗹𝗶𝘁𝗲𝗿𝗮𝗹𝘀:
 kubectl create secret generic firstsecret --from-literal=username=Prathima --from-literal=password=admin@123

* --𝗳𝗿𝗼𝗺-𝗲𝗻𝘃-𝗳𝗶𝗹𝗲:
 vim mysecrets.env
 name=Prathima
 place=Kadapa
 kubectl create secret generic secondsecret --from-env-file=mysecrets.env

* 𝗗𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝘃𝗲 𝗠𝗲𝘁𝗵𝗼𝗱
Create a secret.yml file with base64-encoded values.
 echo "admin@123" | base64

* Access Secrets
 kubectl get secret
 kubectl describe secret firstsecret -o yaml
 echo "encoded_data" | base64 --decode

* 𝗜𝗻𝗷𝗲𝗰𝘁 𝗦𝗲𝗰𝗿𝗲𝘁𝘀 𝗶𝗻𝘁𝗼 𝗣𝗼𝗱𝘀
Use envFrom and secretRef in pod.yml Manifest file
 kubectl create -f pod.yml
 kubectl exec -it pod-name -- bash
 printenv

* 𝗡𝗔𝗠𝗘𝗦𝗣𝗔𝗖𝗘𝗦 𝗶𝗻 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀
Namespaces are used for resource isolation across dev, test, and prod environments.

* Default Namespaces:
default
kube-system
kube-public
kube-node-lease

* 𝗖𝗿𝗲𝗮𝘁𝗲 𝗡𝗮𝗺𝗲𝘀𝗽𝗮𝗰𝗲𝘀:
𝗜𝗺𝗽𝗲𝗿𝗮𝘁𝗶𝘃𝗲:
 kubectl create ns dev

𝗗𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝘃𝗲:
 kubectl create -f ns.yml

* 𝗠𝗮𝗻𝗮𝗴𝗲 𝗥𝗲𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝗽𝗲𝗿 𝗡𝗮𝗺𝗲𝘀𝗽𝗮𝗰𝗲:
 kubectl run pod-3 --image=nginx -n dev
 kubectl get po -n dev
 kubectl get all -n default

* 𝗦𝘄𝗶𝘁𝗰𝗵 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝗻𝗮𝗺𝗲𝘀𝗽𝗮𝗰𝗲𝘀:
 kubectl config set-context --current --namespace=dev
