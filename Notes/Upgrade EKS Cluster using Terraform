Step-by-step guide to upgrade an Amazon EKS cluster using Terraform

--

üîÑ Step 1: Backup with Velero

Before upgrading, back up your cluster.

1.1 Install Velero (CLI)

```
"curl -L https://lnkd.in/eDMD7i_r | tar -xz
sudo mv velero-v*/velero /usr/local/bin/"
```
1.2 Install Velero to EKS

Replace <YOUR-BUCKET> and <YOUR-REGION>:

```
velero install \
    --provider aws \
    --plugins velero/velero-plugin-for-aws:v1.8.0 \
    --bucket <YOUR-BUCKET> \
    --backup-location-config region=<YOUR-REGION> \
    --snapshot-location-config region=<YOUR-REGION> \
    --use-restic \
    --wait
```

1.3 Create Backup

```
velero backup create eks-backup-before-upgrade --include-namespaces "*" --wait
```

---

Step 2: Prepare Terraform Code

Example Terraform Code (Upgrade EKS Version)

Here‚Äôs a minimal example:

```
provider "aws" {
  region = "us-west-2"
}

module "eks" {
  source          = "terraform-aws-modules/eks/aws"
  cluster_name    = "my-eks-cluster"
  cluster_version = "1.30"  # <-- UPDATE THIS VERSION
  subnets         = var.subnets
  vpc_id          = var.vpc_id

  node_groups = {
    default = {
      desired_capacity = 2
      max_capacity     = 3
      min_capacity     = 1

      instance_types = ["t3.medium"]
    }
  }
}
```

Make sure you use the latest supported version of the EKS Terraform module and update cluster_version.
---

Step 3: Validate Cluster

Before upgrade:

``
kubectl get nodes
kubectl get pods --all-namespaces
```
Ensure everything is in Running or Completed state.
---

Step 4: Upgrade EKS Cluster Version

4.1 Plan the Upgrade

```
terraform init
terraform plan
```
4.2 Apply Upgrade

```
terraform apply
```
Terraform will upgrade the EKS control plane.
---

Step 5: Upgrade Worker Node Groups

After the control plane upgrade:

1. Upgrade node group version in Terraform.


2. Apply changes to recreate/update nodes.

Sample Update:

``
node_groups = {
  default = {
    desired_capacity = 2
    instance_types   = ["t3.medium"]
    ami_type         = "AL2_x86_64" # Use latest
    version          = "1.30"       # Match new control plane
  }
}
```

Then run:

```
terraform apply
```
---

Step 6: Drain Old Nodes (Optional)

You can drain old nodes to move workloads:

```
kubectl drain <old-node-name> --ignore-daemonsets --delete-local-data
```

Then delete them.
---
üîç Step 7: Verify Everything

Check nodes:

```
kubectl get nodes
```

Check workloads:

```
kubectl get pods -A
```
Validate application health.
---

Step 8: (Optional) Restore Backup if Needed

If something goes wrong:

```
velero restore create --from-backup eks-backup-before-upgrade
```

Terraform State Handling

Ensure your state is managed properly (e.g., using S3 backend) for safe upgrades:

```
terraform {
  backend "s3" {
    bucket = "my-terraform-state"
    key    = "eks/terraform.tfstate"
    region = "us-west-2"
  }
}
```
