🚀 Kubernetes Architecture — Explained Like You’re Building It Yourself

Let’s stop treating K8s as a black box.
You can’t troubleshoot what you don’t understand.
So here’s how Kubernetes actually works — from the inside out 👇

⚙️ 1. API Server – The Brain
Every kubectl command you run hits this.

It’s the front door to your cluster
Validates requests (authz + admission)
Talks to etcd (the memory)
Sends changes to all other components

✅ If your API Server is down, K8s is blind. You can’t schedule, scale, or patch anything.

🧠 2. etcd – The Memory

Think of it like a version-controlled database of your entire cluster’s state.

Highly available key-value store
Every Pod, ConfigMap, Secret, and Node lives here

✅etcd corruption = cluster amnesia.

3. Controller Manager – The Conductor
Watches the orchestra, makes sure everyone plays the right note.

Ensures: Deployments have the right number of pods
Jobs finish, CronJobs run
Node controllers remove dead ones

✅ If something disappears, controller brings it back. That’s reconciliation.

🧩 4. Scheduler – The Smart Assigner
Decides where your pod runs.

Looks at resource requests, affinity/taints, node status
Picks the best-fit node

✅ No scheduler = no new workloads.

🐝 5. Kubelet – The Node Agent
Lives inside every worker node.

Talks to the API server
Watches pods assigned to this node
Starts containers via container runtime

✅ If kubelet dies, that node is essentially offline to the cluster.

🌐 6. Kube Proxy – The Network Bridge
Handles service-to-pod networking.

Sets up iptables/ipvs rules
Enables service discovery via DNS
Route traffic across pods/nodes

✅ Broken kube-proxy = your service exists, but can’t talk to pods.

🔄 Bonus: Container Runtime
Docker? containerd? CRI-O? Doesn’t matter.
It’s what actually runs the containers.

✅ Your pods are just YAML dreams until this engine runs them.

💡 TL;DR:
Kubernetes isn’t magic.
It’s just a well-coordinated distributed system with clearly defined roles:

API Server → Command center
etcd → Memory
Controller → Reconciler
Scheduler → Planner
Kubelet → Executor
Proxy → Networker
