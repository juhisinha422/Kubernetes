Istio Service Mesh: - # Follow the doc: https://istio.io/latest/docs/setup/getting-started/#download

++++++++++++++++++++++++++++++++++

Service Mesh is a service mesh helps you manage traffic within your Kubernetes cluster, specifically focusing on East-West traffic.

Istio: - Istio / Getting Started: https://istio.io/latest/docs/setup/getting-started/
A popular tool is there for Service mesh named as Istio.

Istio: -
------------ 
Istio is an open source service mesh that layers transparently onto existing distributed applications. Istio’s powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes.

Installation: -
------------------ 
https://istio.io/latest/docs/setup/platform-setup/kind/

Setup: -
---------------------- 
# use a new instance of Ec2. (t2.medium and 30GB)
# install and setup kind-cluster first.
# cd /home/ubuntu/kubernetes/
# mkdir istio
# cd istio
# Download istio
# https://istio.io/latest/docs/setup/getting-started/#download
# curl -L https://istio.io/downloadIstio | sh -
# ls (istio should be there)
# Move to the Istio package directory. For example, if the package is istio-1.26.0:
# cd istio-1.26.0/
 

# cat README.md

# The installation directory contains:
•	Sample applications in samples/
•	The istioctl client binary in the bin/ directory.
# cd samples

 

# cd ..
# cd bin
# ./istioctl
 

# Istio is composed of these components:

- **Envoy** - Sidecar proxies per microservice to handle ingress/egress traffic
   between services in the cluster and from a service to external
   services. The proxies form a _secure microservice mesh_ providing a rich
   set of functions like discovery, rich layer-7 routing, circuit breakers,
   policy enforcement and telemetry recording/reporting
   functions.

- **Istiod** - The Istio control plane. It provides service discovery, configuration and certificate management. It consists of the following sub-components:
    - **Pilot** - Responsible for configuring the proxies at runtime.

    - **Citadel** - Responsible for certificate issuance and rotation.

    - **Galley** - Responsible for validating, ingesting, aggregating, transforming and distributing config within Istio.

- **Operator** - The component provides user friendly options to operate the Istio service mesh.


https://istio.io/latest/docs/setup/getting-started/#download
# Add the istioctl client to your path (Linux or macOS):
# export PATH=$PWD/bin:$PATH (below command)
# sudo mv istioctl /usr/local/bin
# istioctl ( now can execute this command from anywhere inside linux)

# Install Istio: -
------------------------ 
# cd /home/ubuntu/kubernetes/istio/istio-1.26.0
# Install Istio using the demo profile, without any gateways:
# istioctl install -f samples/bookinfo/demo-profile-no-gateways.yaml -y
# istioctl

# Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later:
# kubectl label namespace default istio-injection=enabled
# kubectl get ns -L istio-injection
 

# Install the Kubernetes Gateway API CRDs
# The Kubernetes Gateway API CRDs do not come installed by default on most Kubernetes clusters, so make sure they are installed before using the Gateway API.

# Install the Gateway API CRDs, if they are not already present:

# kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
{ kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0-rc.1" | kubectl apply -f -; }

# Deploy the sample application

# You have configured Istio to inject sidecar containers into any application you deploy in your default namespace.

# Deploy the Bookinfo sample application:

# kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

# The application will start. As each pod becomes ready, the Istio sidecar will be deployed along with it.
# kubectl get services
# kubectl get pods
# kubectl get all

# kubectl get svc
#  kubectl port-forward svc/productpage 9080:9080 --address=0.0.0.0
# Access the app: PublicIP:9080/

 

# Validate that the app is running inside the cluster by checking for the page title in the response:

# kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

 

# Open the application to outside traffic
# Create a Kubernetes Gateway for the Bookinfo application:
# kubectl apply -f samples/bookinfo/gateway-api/bookinfo-gateway.yaml

# Change the service type to ClusterIP by annotating the gateway:
# kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default

# To check the status of the gateway, run:
# kubectl get gateway

# Access the application
# You will connect to the Bookinfo productpage service through the gateway you just provisioned. To access the gateway, you need to use the kubectl port-forward command:

# kubectl port-forward svc/bookinfo-gateway-istio 8080:80 --address=0.0.0.0
# Access the app: Public:8080/productpage
# Open your browser and navigate to http://PublicIP:8080/productpage to view the Bookinfo application.
 

# Follow the doc: https://istio.io/latest/docs/setup/getting-started/#download

# View the dashboard
# To send 100 requests to the productpage service, use the following command:

# for i in $(seq 1 100); do curl -s -o /dev/null "http://$GATEWAY_URL/productpage"; done
	Note replace the GATEWAY_URL with Public IP and port no as below.
# for i in $(seq 1 100); do curl -s -o /dev/null "http://3.108.40.169:8080/productpage"; done


# Use the following instructions to deploy the Kiali dashboard, along with Prometheus, Grafana, and Jaeger.

# Install Kiali and the other addons and wait for them to be deployed.
# kubectl apply -f samples/addons
# kubectl rollout status deployment/kiali -n istio-system

# Access the Kiali dashboard.
Accessing and exposing Kiali | Kiali: https://v1-41.kiali.io/docs/installation/installation-guide/accessing-kiali/
 # istioctl dashboard kiali  (if this command wont work, basically it will not work because using this command for local, so use below command to access kiali dashboard.)

# kubectl port-forward svc/kiali 20001:20001 -n istio-system --address=0.0.0.0
# Access the app: Public_ip:20001/kiali
 




# Select applications and default namespace to view the details of the application.
# click on mesh
# click on traffic graph and select last 5 min.


