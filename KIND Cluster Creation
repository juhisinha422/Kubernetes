My first Kubernetes Basic Project using KIND:

Designed and deployed a Kubernetes cluster using KIND (Kubernetes IN Docker) to simulate a production-like environment locally. The setup includes:

1 Control Plane Node: Hosted core components—API Server, Scheduler, Controller Manager, and etcd—for managing the cluster state.
3 Worker Nodes: Configured with Kubelet, Kube Proxy, and container runtime to run application workloads.
API Server connected to all nodes for coordination and command execution via kubectl.
Implemented service proxy to enable network communication between services and CNI plugin (Weave Net/Calico) for pod networking.
Ensured proper communication flow from users to services via the control plane and worker nodes.
This project demonstrates core Kubernetes concepts, control plane architecture, and networking—all within a containerized, lightweight environment using KIND.


# Creating KIND Setup: - (3 worker nodes)
------------------------------------ 
kind – Quick Start : https://kind.sigs.k8s.io/docs/user/quick-start/#creating-a-cluster

$ mkdir kind-cluster
$ cd kind-cluster
$ vi config.yml

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

nodes:
- role: control-plane
  image: kindest/node:v1.31.2
- role: worker
  image: kindest/node:v1.31.2
- role: worker
  image: kindest/node:v1.31.2
- role: worker
  image: kindest/node:v1.31.2
  extraPortMappings:
    - containerPort: 80
      hostPort: 80
      protocol: TCP
    - containerPort: 443
      hostPort: 443
      protocol: TCP


KIND Cluster Creation: -
++++++++++++++++++++++ 
$ kind create cluster --name=sinhajuhi-cluster --config=config.yml
$ kubectl cluster-info --context kind-sinhajuhi-cluster
$ kubectl get nodes



